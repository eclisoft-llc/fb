trigger:
  branches:
    include:
      - develop
      - release

resources:
  - repo: self

variables:

  # Container registry service connection established during pipeline creation
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    dockerRegistryServiceConnection: '16ff6940-4f92-4a11-a431-2afd1e178978'
    containerRegistry: 'fbcusbbdevcr01.azurecr.io'
    imagePullSecret: 'fbcusbbdevcr015806a02a-auth'
    namespaceName: 'fb-dev-001-AKS.fbdevfinite01'
    deploymentYamlFile: 'deployment_dev.yml'
  ${{ if eq(variables['Build.SourceBranchName'], 'release') }}:
    dockerRegistryServiceConnection: 'a00547f9-8233-4103-ab0e-244a8177fc49'
    containerRegistry: 'fbcusbbtestcr01.azurecr.io'
    imagePullSecret: 'fbcusbbtestcr0112971cfe-auth'
    namespaceName: 'fb-test-001-AKS.fbtestfinite01'
    deploymentYamlFile: 'deployment_release.yml'
  imageRepository: 'fbolbackbasepayverisbatchpaysafe'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'


  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
  - stage: Build_Maven
    displayName: Build and Package Maven
    jobs:
      - job: MavenPackageAndPublishArtifacts
        displayName: Maven Package and Publish Artifacts
        pool:
          vmImage: $(vmImageName)

        steps:
          - task: DownloadSecureFile@1
            name: settings_xml
            displayName: 'Download Maven settings.xml'
            inputs:
              secureFile: 'settings.xml'

          - task: Maven@3
            displayName: 'Maven Clean Install'
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xss2M'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '17'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              goals: 'clean install'
              options: '--settings $(settings_xml.secureFilePath)'

          - task: CopyFiles@2
            displayName: 'Copy JAR File to artifact staging directory'
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              Contents: '**/target/*.?(war|jar)'
              TargetFolder: $(Build.ArtifactStagingDirectory)

          - upload: $(Build.ArtifactStagingDirectory)
            artifact: drop
  - stage: Build
    displayName: Build Docker Image
    dependsOn: Build_Maven
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: drop
          - script: |
              cd /home/vsts/work/1/s
              mkdir target
              cp /home/vsts/work/1/target/paysafe-batch-1.0.0-SNAPSHOT.jar /home/vsts/work/1/s/target/paysafe-batch-1.0.0-SNAPSHOT.jar
              cd /home/vsts/work/1/s/target
              mkdir -p dependency && (cd dependency; jar -xf ../*.jar)
              cd /home/vsts/work/1/s/target/dependency
              cd /home/vsts/work/1/s/

          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

          - upload: manifests
            artifact: manifests

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build

    jobs:
      - deployment: Deploy
        displayName: Deploy
        pool:
          vmImage: $(vmImageName)
        environment: '$(namespaceName)'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: createSecret
                    secretName: $(imagePullSecret)
                    dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: deploy
                    manifests: |
                      $(Pipeline.Workspace)/manifests/$(deploymentYamlFile)
                      $(Pipeline.Workspace)/manifests/service.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)
                    rolloutStatusTimeout: 450