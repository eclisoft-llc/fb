<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="3/1/2021 2:48:20 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="PC0199-40435"
  DTS:CreatorName="FBMISDOM\prokekenf01"
  DTS:DTSID="{99E6DA1A-C9B1-4548-B2E2-64F277857302}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.152"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="48"
  DTS:VersionGUID="{F9CEE6BD-5E9B-4150-85C2-E5DF0CE5E312}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DestFile]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{D90404C0-E2E9-4BC5-A1E9-BC153D2F0699}"
      DTS:ObjectName="DestFile">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::dest]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\Users\Public\HashFiles\Out\0">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="8000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Data"
              DTS:DTSID="{D9FE07CA-76F0-4FE6-AE14-5AA2B17EAFB2}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SrcFiles]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{9A13F9EB-959D-4C5B-AA3C-54EC57070733}"
      DTS:ObjectName="SrcFiles">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::connstr]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:ColumnNamesInFirstDataRow="True"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\Users\Public\HashFiles\0">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x0009_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Debit Card Numb"
              DTS:DTSID="{81ECEBE1-9DD5-44CD-B0BC-60C6DACA849E}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x0009_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Card BIN Numb"
              DTS:DTSID="{6D467E70-CF84-40E7-AF83-B20D952414F7}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x0009_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Card BIN Type Code"
              DTS:DTSID="{CCA3AB09-F77E-4EE3-AB1E-97FCD57E4A67}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x0009_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="BIN Type Descr"
              DTS:DTSID="{9C1E2F48-9E49-4CE7-9F3D-757110CD204C}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x0009_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Branch Numb"
              DTS:DTSID="{861A1266-321A-4EDC-BF54-2059DBD9EF02}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x0009_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Branch Name"
              DTS:DTSID="{7C57F09A-4D82-4E61-8A88-BD2D75F31556}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x0009_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Cost Center"
              DTS:DTSID="{25CACC21-9370-48FE-B175-E73F10CB6BC6}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x0009_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Card Status Code"
              DTS:DTSID="{83895646-F551-4D49-9CB4-3BEFE27A6F13}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x0009_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Card Status Descr"
              DTS:DTSID="{F3EBCAEF-BC2F-48F9-AE3B-A4AC53F85E8C}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x0009_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Card Status Reason Code"
              DTS:DTSID="{8FFF8C65-0435-4156-96BF-574B82E726BB}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x0009_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Card Status Reason Name"
              DTS:DTSID="{23DD2EBC-42DB-44A9-8A15-543DBA12AFA6}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x0009_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Date Process"
              DTS:DTSID="{32A8EDA9-B0FA-4BF6-972D-1FDF309E6CA1}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="500"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Date Extract"
              DTS:DTSID="{D58ABCA6-1512-4703-801F-55082C60CABF}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{455CA428-43CF-4BAD-9C0B-D388C761B24B}"
      DTS:ObjectName="colmask">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">*</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{DF97760A-88D0-45B7-9D2D-73ECA99C8D13}"
      DTS:ObjectName="filemask">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">*DL_Acct_DP*.txt</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:DTSID="{876F27BD-7D0E-4CBA-994A-017E54B145CE}"
      DTS:ObjectName="firstval">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{BE03D16E-66AB-4D4C-98C4-F7C50081E8FB}"
      DTS:ObjectName="hashcols">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Acct Numb - Operational</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:DTSID="{2FFBF3E2-C184-4CDA-A5F8-C122403531CA}"
      DTS:ObjectName="lastval">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">4</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{E02319A7-E1F2-4743-87CA-81F0B9F13FF9}"
      DTS:ObjectName="maskcols">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Acct Numb - Operational</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{3F536CCC-315A-4E4D-BE71-F097D6A3EEDA}"
      DTS:ObjectName="Output">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Out\</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{72ABBD5B-E855-4941-B536-0C03E90602ED}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LocalPath] +  @[User::currentfile]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="connstr">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\Public\HashFiles\0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CF633922-F1E0-4164-9241-E5EB9116A1DE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="currentfile">
      <DTS:VariableValue
        DTS:DataType="8">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B9EBAB2E-FA88-4F01-BC75-84EAE136469D}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LocalPath] + @[$Package::Output]   + @[User::currentfile]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="dest">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\Public\HashFiles\Out\0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\getFiles"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{dd8a9e49-9649-4023-9bdf-7009489f7d95}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="getFiles">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachFileEnumerator"
        DTS:DTSID="{23b68bb7-6eb0-462d-b69d-031628db45e1}"
        DTS:ObjectName="{5722D3BC-3050-4DB0-BE29-0395993D1FC8}">
        <DTS:PropertyExpression
          DTS:Name="Directory">@[$Project::LocalPath]</DTS:PropertyExpression>
        <DTS:PropertyExpression
          DTS:Name="FileSpec">@[$Package::filemask]</DTS:PropertyExpression>
        <DTS:ObjectData>
          <ForEachFileEnumeratorProperties>
            <FEFEProperty
              Folder="C:\Users\Public\HashFiles\" />
            <FEFEProperty
              FileSpec="*DL_Acct_DP*.txt" />
            <FEFEProperty
              FileNameRetrievalType="1" />
            <FEFEProperty
              Recurse="0" />
          </ForEachFileEnumeratorProperties>
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\getFiles\Transform"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{551c63b3-f2f4-44fa-86a5-e552829adcb4}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Transform"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\getFiles\Transform\HashedMasked_Files_Output"
                  componentClassID="Microsoft.FlatFileDestination"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Flat File Destination"
                  localeId="1033"
                  name="HashedMasked_Files_Output"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                    <property
                      dataType="System.Boolean"
                      description="When text qualifier is enabled, specifies whether the text qualifier in the data written to the destination file will be escaped or not."
                      name="EscapeQualifier">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\getFiles\Transform\HashedMasked_Files_Output.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[DestFile]"
                      connectionManagerRefId="Package.ConnectionManagers[DestFile]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\getFiles\Transform\HashedMasked_Files_Output.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\getFiles\Transform\HashedMasked_Files_Output.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\getFiles\Transform\HashedMasked_Files_Output.Inputs[Flat File Destination Input].ExternalColumns[Data]"
                          lineageId="Package\getFiles\Transform\HashMask_Files.Outputs[Output 0].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\getFiles\Transform\HashedMasked_Files_Output.Inputs[Flat File Destination Input].ExternalColumns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          name="Data" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\getFiles\Transform\HashMask_Files"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;12"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="HashMask_Files"
                  version="12">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 0"))
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String colmask
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["colmask"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String connstr
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["connstr"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String filemask
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["filemask"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public Int32 firstval
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["firstval"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String hashcols
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["hashcols"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public Int32 lastval
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["lastval"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String maskcols
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["maskcols"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String saltedkey
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["saltedkey"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        string fpath = Variables.connstr;
        string[] allLines = File.ReadAllLines(fpath);
        allcolls = new Dictionary<int, string>();
        hashcols = new Dictionary<string, string>();
        maskcols = new Dictionary<string, string>();

        string[] fh = allLines[0].Split('\t');

        sb = allLines[0];

        string h = "";

        for (int i = 0; i < fh.Length; i++)
            allcolls.Add(i, fh[i]);


        if (!string.IsNullOrEmpty(Variables.hashcols))
        {
            string[] a = Variables.hashcols.Split(',');

            for (int i = 0; i < a.Length; i++)
            {
                hashcols.Add(a[i], a[i]);
                h += a[i] + "\t";

            }

        }
        int x = fh.Length;
        if (!string.IsNullOrEmpty(Variables.maskcols))
        {
            string[] b = Variables.maskcols.Split(',');

            for (int i = 0; i < b.Length; i++)
            {
                maskcols.Add(b[i] + "MASKED", b[i] + "MASKED");
                
                allcolls.Add(x++, b[i] + "MASKED");
                sb += "\t" + b[i] + " MASKED\t";

            }

        }

        sb = sb.TrimEnd('\t');
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }
    private Dictionary<string, string> hashcols;
    private Dictionary<string, string> maskcols;
    private Dictionary<int, string> allcolls;
    private string sb;
    private bool ishead = false;
    public override void CreateNewOutputRows()
    {
        if (!ishead)
        {
            Output0Buffer.AddRow();
            Output0Buffer.Data = sb;
            ishead = true;

        }

        string npiSaltedHash = "";

        string saltedKey = Variables.saltedkey;
        string vv = "";
        string l = "";

        string fpath = Variables.connstr;
        string[] allLines = File.ReadAllLines(fpath);

        string[] fh = allLines[0].Split('\t');
        string[] v = null;
        for(int i =1; i<allLines.Length-1; i++)
        {
            v = allLines[i].Split('\t');
            l = "";

          foreach (KeyValuePair<int,string> k in allcolls)
            {
                
                if (hashcols.ContainsKey(k.Value))
                {
                    
                    if (hashcols[k.Value] == k.Value)
                    {
                        vv = v[k.Key];
                        npiSaltedHash = GenerateSaltedHash(vv, saltedKey);
                        l += npiSaltedHash + "\t";

                    }
                }
                else
                {
                    if (!maskcols.ContainsKey(k.Value))
                    {
                        vv = v[k.Key];
                        l += vv + "\t";
                    }
                }

                if (maskcols.ContainsKey(k.Value))
                {
                    
                    if (maskcols[k.Value] == k.Value)
                    {
                        var kk = allcolls.FirstOrDefault(x => x.Value == k.Value.Replace("MASKED","")).Key;
                        vv = v[kk];
                        if (IsValidEmail(vv))
                            l += EmailMask(vv) + "\t";
                        else if (!string.IsNullOrEmpty(Variables.colmask))
                            l += PartialMask(vv, Variables.firstval, Variables.lastval, Variables.colmask.ToCharArray()[0]) + "\t";
                        else
                            l += DefaultMask(vv) + "\t";
                    }
                }
            }
            l = l.TrimEnd('\t');

            Output0Buffer.AddRow();
            Output0Buffer.Data = l;
        }


    }

    public static string GenerateSaltedHash(string value, string storedSalt)
    {
        var saltBytes = Convert.FromBase64String(storedSalt);
        //Without the fourth parameter, the default algorithm used is SHA1
        var rfc2898DeriveBytes = new Rfc2898DeriveBytes(value, saltBytes, 10000, HashAlgorithmName.SHA256);
        var hashedValue = Convert.ToBase64String(rfc2898DeriveBytes.GetBytes(64));
        return hashedValue;
    }

    public static string DefaultMask(object sourceValue, char maskCharacter = 'X')
    {
        if (sourceValue == null)
            return string.Empty;

        string maskedString = string.Empty;

        if (sourceValue is string)
        {
            maskedString = new string(maskCharacter, 4);
        }
        else if (sourceValue is int || sourceValue is long)
        {
            maskedString = "0";
        }
        else if (sourceValue is double || sourceValue is decimal || sourceValue is float)
        {
            maskedString = "0.00";
        }
        else if (sourceValue is DateTime)
        {
            maskedString = "1900-01-01";
        }

        return maskedString;

    }//end of DefaultMask method

    /// <summary>
    /// Mask email addresses. Masks all but the first letter followed by XXX, followed by @ sign, followed by XXXX and exposes the domain suffix (like .com, .org etc..).
    /// </summary>
    /// <param name="email">Email address to mask.</param>
    /// <returns>Mask email address in the format "aXXX@XXXX.com".</returns>
    public static string EmailMask(string email)
    {
        if (string.IsNullOrEmpty(email) || !email.Contains("@"))
            return email;

        string[] emailArr = email.Split('@');
        string domainExt = Path.GetExtension(email);

        string maskedEmail = string.Format("{0}XXX@XXXX{1}",
           emailArr[0][0],
           domainExt
           );

        return maskedEmail;

    }//end of EmailMask method

    /// <summary>
    /// Allows you to define exactly which values are masked. This function works best for values that is consistently formatted, such as credit card numbers or national IDs.
    /// </summary>
    /// <param name="sourceValue">Source value to mask.</param>
    /// <param name="leadingOpenCharacters">Prefix characters to be exposed.</param>
    /// <param name="trailingOpenCharacters">Suffix characters to be exposed.</param>
    /// <param name="maskCharacter">Character to use for masking. Default is "X".</param>
    /// <returns>Custom mask (e.g. 12XXXXXXX2, XXXXX3, ****21 etc.).</returns>
    public static string PartialMask(string sourceValue, int leadingOpenCharacters = 1, int trailingOpenCharacters = 1, char maskCharacter = 'X')
    {
        if (string.IsNullOrEmpty(sourceValue))
            return sourceValue;

        string maskedString = string.Empty;
        int stringLength = sourceValue.Length;
        string openCharacters = sourceValue.Substring(0, leadingOpenCharacters);
        string trailingCharacters = stringLength > trailingOpenCharacters ? sourceValue.Substring(stringLength - trailingOpenCharacters) : string.Empty;

        int middleCharactersLength = (stringLength - leadingOpenCharacters) - (stringLength > trailingOpenCharacters ? trailingOpenCharacters : 0);

        if (stringLength == 1)
        {
            maskedString = new string(maskCharacter, 1);
        }
        else
        {
            maskedString = string.Format("{0}{1}{2}",
           openCharacters,
           new string(maskCharacter, (middleCharactersLength == 0 ? 1 : middleCharactersLength)),
           trailingCharacters
           );
        }

        return maskedString;

    }//end of PartialMask method

    /// <summary>
    /// Replaces numerical values with a random value within a specified range.
    /// </summary>
    /// <param name="sourceValue">Source value.</param>
    /// <param name="randomRange">Specified range (like 1 for range between 1 and 9, 2 for range between 101 and 999 etc..).</param>
    /// <returns>Random number within a defined range (e.g. 10, 231, 1002, 53423 etc.).</returns>
    public static string RandomMask(object sourceValue, int randomRange = 5)
    {

        if (sourceValue == null)
            return null;

        Random rand = new Random();
        int randomValue;
        switch (randomRange)
        {
            case 1:
                randomValue = rand.Next(1, 9);
                break;
            case 2:
                randomValue = rand.Next(10, 99);
                break;
            case 3:
                randomValue = rand.Next(100, 999);
                break;
            case 4:
                randomValue = rand.Next(1000, 9999);
                break;
            case 5:
                randomValue = rand.Next(10000, 99999);
                break;
            case 6:
                randomValue = rand.Next(100000, 999999);
                break;
            default:
                randomValue = rand.Next(10000, 99999);
                break;
        }

        return randomValue.ToString();

    }//end of RandomMask method

    bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_d0cdaea919b1436cbc0318ccd0fc5e28.Properties.Settings.get_Default():SC_d0cdaea919b1436cbc0318ccd0fc5e28.Properties.Sett" +
    "ings")]

namespace SC_d0cdaea919b1436cbc0318ccd0fc5e28.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_d0cdaea919b1436cbc0318ccd0fc5e28.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_d0cdaea919b1436cbc0318ccd0fc5e28.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_d0cdaea919b1436cbc0318ccd0fc5e28.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_d0cdaea919b1436cbc0318ccd0fc5e28.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_d0cdaea919b1436cbc0318ccd0fc5e28.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_d0cdaea919b1436cbc0318ccd0fc5e28</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_d0cdaea919b1436cbc0318ccd0fc5e28</msb:DisplayName>
    <msb:ProjectId>{5279E452-A289-4E14-9612-23E0EF2721D9}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_d0cdaea919b1436cbc0318ccd0fc5e28.csproj" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_d0cdaea919b1436cbc0318ccd0fc5e28")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_d0cdaea919b1436cbc0318ccd0fc5e28")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_d0cdaea919b1436cbc0318ccd0fc5e28.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D1474B62-78C0-43EA-9D84-82D599E1CE8B}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_d0cdaea919b1436cbc0318ccd0fc5e28</RootNamespace>
    <AssemblyName>SC_d0cdaea919b1436cbc0318ccd0fc5e28</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_d0cdaea919b1436cbc0318ccd0fc5e28.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[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
UAEAcG9JAAAKKEoAAApvSwAACnQgAAABKpYCewoAAARvSAAACnJiAQBwb0kAAAooSgAACm9LAAAK
pSkAAAEqlgJ7CgAABG9IAAAKcnQBAHBvSQAACihKAAAKb0sAAAp0IAAAASqWAnsKAAAEb0gAAApy
hgEAcG9JAAAKKEoAAApvSwAACqUpAAABKpYCewoAAARvSAAACnKWAQBwb0kAAAooSgAACm9LAAAK
dCAAAAEqlgJ7CgAABG9IAAAKcqgBAHBvSQAACihKAAAKb0sAAAp0IAAAASoeAihHAAAKKq5+CwAA
BC0ecrwBAHDQBwAAAihMAAAKb00AAApzTgAACoALAAAEfgsAAAQqGn4MAAAEKh4CgAwAAAQqGn4N
AAAEKh4CKE8AAAoqLnMlAAAGgA0AAAQqng8BKB8AAAoCfA4AAAQoHwAACnIHAABwcgEAAHBvUAAA
CigiAAAKKgAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAACwJAAAjfgAAmAkA
AKgKAAAjU3RyaW5ncwAAAABAFAAAMAIAACNVUwBwFgAAEAAAACNHVUlEAAAAgBYAAGQDAAAjQmxv
YgAAAAAAAAACAAABVx2iCQkLAAAA+gEzABYAAAEAAAA4AAAACQAAAA4AAAAoAAAAGQAAAFAAAAAF
AAAAEQAAAAkAAAAEAAAADQAAAA4AAAAFAAAAAQAAAAYAAAABAAAAAQAAAAEAAAAAAEgFAQAAAAAA
BgBTAzIHBgDnAzIHBgCfAh8HDwCmBwAABgDMAvYFBgA2A/YFBgAXA/YFBgDOA/YFBgBzA/YFBgCM
A/YFBgDjAvYFBgD+AjgECgCnA9gBBgCTAAkBOwDxBgAABgCEAAkBBgAQCZoFBgChBZoFBgBnAjIH
CgCXBtgBDgCIBtgBCgAuBtgBCgBwCdgBBgCCAh8HBgCoBlIHBgAiBuEFEgBSAg8FEgCzAg8FEgAy
AswFBgC4AeoABgB1BpoFBgB0BJoFBgB9AJoFFgBvAWkGBgBpAAkBBgB6AZoFBgCpCZoFBgC9AWIK
BgAHCGIKBgAOCGIKBgB3AJoFBgCgAJoFBgCGAZoFBgDuBJoFBgCxAZoFBgDPAZoFBgCYBOoAEgDU
CCUFBgAIBpoFGgARALgGGgABALgGXwD7CQAAGgAiALgGBgD5AZoFBgCNAZoFBgCDCvYFAAAAANUA
AAAAAAEAAQABABAAtAUAABAAAQABAAEAEAB6BgAAUQAGAAsAAQAQAFIJAABdAAYAEQABABAAfQgA
AEUACQAWAAEAEADwBwAARQAKABcAAAAQAFkHtQdFAAsAIAAAARAASAi1B3UADQAkAAMBEAA6AAAA
RQAOACcAAQBeCP8BAQBrCP8BAQBRCAcCAQAGATABAQAkAQ8CBgB9CBICBgDwBxYCBgB6BhoCAQBg
CR4CAQBgCR4CEQCoBSICEQAiAiYCEQBTASoCBgDsBC4CUCAAAAAAxgAFBAYAAQAQIgAAAADGABAE
BgABABgiAAAAAMYA7ggGAAEA7CQAAAAAlgCFBFoAAQAgJQAAAACWAMkENgIDAJglAAAAAJYAtARE
AQUA8CUAAAAAlgCoBDwCBgBsJgAAAACWAL4ERAIKACAnAAAAAIEANQU/AQwAWCcAAAAAhhj8BgYA
DQBgJwAAAACGGPwGiAENAGsnAAAAAIYI9AAQABAAdScAAAAAhghwBUoCEQCMJwAAAACGACsKBgAS
AJQnAAAAAIYAFwkGABIAnCcAAAAAhgAaCQABEgCkJwAAAACGGPwGBgASAMQnAAAAAMYB4AgGABIA
xicAAAAAgQAvAQYAEgDkJwAAAADGANIJTwISAMQnAAAAAMYB7ggGABYAOSgAAAAAhhj8BlsCFgBI
KAAAAACGGPwGWwIXAFcoAAAAAIYI4gSAARgAfSgAAAAAhggJB4ABGACjKAAAAACGCNUEgAEYAMko
AAAAAIYIAgVdARgA7ygAAAAAhghaCIABGAAVKQAAAACGCPYEXQEYADspAAAAAIYIZwiAARgAYSkA
AAAAhghUCoABGACHKQAAAACDGPwGBgAYAI8pAAAAAJMIpAZhAhgAuykAAAAAkwgKAmYCGADCKQAA
AACTCBYCawIYAMopAAAAAJYINwlxAhkA0SkAAAAAhhj8BgYAGQDZKQAAAACRGAIHdgIZAIcpAAAA
AIYY/AYGABkA5SkAAAAAgwBPAHoCGQAAAAEAMgQAAAIALAkAAAEAJgQQEAIA4AYAAAEAQgUAAAEA
JgQQEAIAmwgQEAMAsQgQEAQA4AYAAAEAJgQQEAIAYwEAAAEAQgUAAAEAnQYAAAIAIwgAAAMAPAYA
AAEAMgQAAAEAMgQAAAEA5ggAAAIAFQcAAAMAkwgAAAQAPAYAAAEAdgkAAAEAdgkAAAEAMgQAAAEA
MgoJAPwGAQARAPwGBgAZAPwGCgApAPwGEAAxAPwGEAA5APwGEABBAPwGEABJAPwGEABRAPwGEABZ
APwGEABhAPwGEABpAPwGBgCZAPwGBgDBAPwGBgDhAPwGFQC5AAUEBgDxAPoHKwAMAPwGBgAUAPwG
BgABASYJPwAMACsBRgABAZgKTgAUACsBRgABAQIJUwABAQIJWgABAQIJYAABAUMBaAC5ABAEBgAM
AO4GiQAcAIAJmwAkABwErQAUAEgKsgAUAIgFuAABAYwKvwAkAEAKxQAsAPwG1wARAUMJ3QABATQK
+wAcAN4JAAEhAUoCBgApAVIECQExAaYADwE5AfwGFQFBARoIIAEpAWMEJgEBAaAKMAEBAfwGMwEB
AXQIPwF5Ab8FRAEBAYkISQEBAQkJTgEBAZ0EXQEBAXsEYQEBAXsEZwEBAQkJbAGRAPwGBgCRAOIJ
egFJAXIEgAGBAfwGEACBAcgIgAGhAPwGiAGhAJEFkgGhAIAFAQCJAfwGEAChACsKBgChABcJBgCh
ABoJAAG5APwGBgC5AN4AnAG5ADcIowGJAPwGBgC5AOQHqQGRAYgFrwG5ABYKtgGZAecJvAGxAZ8B
wwGxAX8KzAHJAPwG0gHpAPwGBgABAUsB2gEDABEA8gEIAB0A9QEIACEA9QEDACUA8gEIAC0A+gEu
AAsAnwIuABMAqAIuABsAxwIuACMA0AIuACsA+QIuADMA+QIuADsA+QIuAEMA0AIuAEsA/wIuAFMA
+QIuAFsAFgNDAGMA9QHjAHMA9QEjAWsA9QFpAXsAxwKJAXsAxwKhAWsA9QEbAG4ABAEsATkBVQF0
AYQBmAEDAAEABgADAAcACwAIAA0AAAD4AIQCAAB0BYgCAADmBIQCAAANB4QCAADZBIQCAAAGBYwC
AABeCIQCAAD6BIwCAABrCIQCAABYCoQCAACoBpACAAAqApUCAABKCZoCAQAMAAMAAQANAAUAAgAY
AAcAAgAZAAkAAgAaAAsAAgAbAA0AAgAcAA8AAgAdABEAAgAeABMAAgAfABUAAgAhABcAAgAiABkA
AQAjABkAAgAkABsAMQA4AJQApgDKAASAAAABAAAAAAAAAAAAAAAAALEAAAAEAAAAAAAAAAAAAADg
Af0AAAAAAA8AAAAAAAAAAAAAAOkBjAkAAAAADwAAAAAAAAAAAAAA6QGxCQAAAAAEAAAAAAAAAAAA
AADgAZoFAAAAAAQAAAAAAAAAAAAAAOAB/gEAAAAADwAAAAAAAAAAAAAA6QFGBgAAAAAAAAAAAQAA
AGMHAAAJAAIASwDyAAAAAElEVFNWYXJpYWJsZTEwMABJRFRTVmFyaWFibGVzMTAwAElEVFNFdmFs
dWF0b3JDb250ZXh0MTAwADw+Y19fRGlzcGxheUNsYXNzN18wADxDcmVhdGVOZXdPdXRwdXRSb3dz
PmJfXzAASUVudW1lcmFibGVgMQBJbnQzMgBGdW5jYDIAS2V5VmFsdWVQYWlyYDIARGljdGlvbmFy
eWAyAEludDY0AGdldF9TSEEyNTYAU0NfZDBjZGFlYTkxOWIxNDM2Y2JjMDMxOGNjZDBmYzVlMjgA
PE1vZHVsZT4AR2V0T3V0cHV0SUQAU3lzdGVtLklPAHNldF9EYXRhAG1zY29ybGliAHNiAFN5c3Rl
bS5Db2xsZWN0aW9ucy5HZW5lcmljAGlzaGVhZABBZGQATWFya091dHB1dHNGaW5pc2hlZABUcmlt
RW5kAFJlcGxhY2UAZGVmYXVsdEluc3RhbmNlAHJhbmRvbVJhbmdlAEVudW1lcmFibGUASURpc3Bv
c2FibGUARG91YmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAFNpbmdsZQBG
aWxlAEhhc2hBbGdvcml0aG1OYW1lAERhdGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBp
cGVsaW5lAFR5cGUAU3lzdGVtLkNvcmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VD
dWx0dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3Rh
dGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0
ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRp
dGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0
dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlv
bkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVj
dEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0Q29tcG9uZW50
RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBh
dGliaWxpdHlBdHRyaWJ1dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0ZQBnZXRfVmFsdWUAc291cmNl
VmFsdWUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBGcm9tQmFzZTY0U3RyaW5nAFRv
QmFzZTY0U3RyaW5nAFRvU3RyaW5nAFN1YnN0cmluZwBHZW5lcmF0ZVNhbHRlZEhhc2gAUGF0aABn
ZXRfTGVuZ3RoAFBhcnRpYWxNYXNrAEVtYWlsTWFzawBSYW5kb21NYXNrAERlZmF1bHRNYXNrAGdl
dF9maWxlbWFzawBnZXRfY29sbWFzawBEZWNpbWFsAGdldF9sYXN0dmFsAGdldF9maXJzdHZhbABT
eXN0ZW0uQ29tcG9uZW50TW9kZWwAU3lzdGVtLk5ldC5NYWlsAElzVmFsaWRFbWFpbABlbWFpbABT
Q19kMGNkYWVhOTE5YjE0MzZjYmMwMzE4Y2NkMGZjNWUyOC5kbGwAc2V0X0RhdGFfSXNOdWxsAFNl
dE51bGwAZ2V0X0l0ZW0Ac2V0X0l0ZW0AU3lzdGVtAFJhbmRvbQByZXNvdXJjZU1hbgBTY3JpcHRN
YWluAEdldEV4dGVuc2lvbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlv
bgBTeXN0ZW0uUmVmbGVjdGlvbgBJbnZhbGlkT3BlcmF0aW9uRXhjZXB0aW9uAEN1bHR1cmVJbmZv
AE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUnVudGltZVdy
YXAAU3lzdGVtLkxpbnEAQ2hhcgBPdXRwdXQwQnVmZmVyAFBpcGVsaW5lQnVmZmVyAFNjcmlwdEJ1
ZmZlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUu
V3JhcHBlcgBtYXNrQ2hhcmFjdGVyAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAGdldF9jb25u
c3RyAE91dHB1dElEcwBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJT
ZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDX2QwY2RhZWE5MTliMTQzNmNiYzAzMThjY2QwZmM1
ZTI4LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTQ19kMGNk
YWVhOTE5YjE0MzZjYmMwMzE4Y2NkMGZjNWUyOC5Qcm9wZXJ0aWVzAGdldF9SZWFkT25seVZhcmlh
YmxlcwBSZWFkQWxsTGluZXMAUmZjMjg5OERlcml2ZUJ5dGVzAEdldEJ5dGVzAEJ1ZmZlckNvbHVt
bkluZGV4ZXMAR2V0Q29sdW1uSW5kZXhlcwBTZXR0aW5ncwBhbGxjb2xscwBnZXRfaGFzaGNvbHMA
Z2V0X21hc2tjb2xzAENvbnRhaW5zAENvbm5lY3Rpb25zAGdldF9DaGFycwBCdWZmZXJzAGxlYWRp
bmdPcGVuQ2hhcmFjdGVycwB0cmFpbGluZ09wZW5DaGFyYWN0ZXJzAGdldF9BZGRyZXNzAE1haWxB
ZGRyZXNzAEZpbmlzaE91dHB1dHMAQ3JlYXRlTmV3T3V0cHV0Um93cwBDb25jYXQARm9ybWF0AE9i
amVjdABTZXRFbmRPZlJvd3NldABTcGxpdABzdG9yZWRTYWx0AGdldF9EZWZhdWx0AEZpcnN0T3JE
ZWZhdWx0AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlwdENvbXBvbmVudABnZXRf
Q3VycmVudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AENvbnZlcnQATWljcm9zb2Z0LlNx
bFNlcnZlci5QaXBlbGluZUhvc3QAUHJpbWVPdXRwdXQATW92ZU5leHQAR2V0VmFsdWVXaXRoQ29u
dGV4dABTY3JpcHRDb21wb25lbnRFdmFsQ29udGV4dABnZXRfRXZhbHVhdG9yQ29udGV4dABBZGRS
b3cAeABUb0NoYXJBcnJheQBnZXRfS2V5AENvbnRhaW5zS2V5AGdldF9zYWx0ZWRrZXkAU3lzdGVt
LlNlY3VyaXR5LkNyeXB0b2dyYXBoeQBnZXRfQXNzZW1ibHkAb3BfRXF1YWxpdHkASXNOdWxsT3JF
bXB0eQAAAAABAAMJAAANTQBBAFMASwBFAEQAABEgAE0AQQBTAEsARQBEAAkAAAMwAAAJMAAuADAA
MAAAFTEAOQAwADAALQAwADEALQAwADEAAQNAAAAdewAwAH0AWABYAFgAQABYAFgAWABYAHsAMQB9
AAATewAwAH0AewAxAH0AewAyAH0AAICbSQBzAE4AdQBsAGwAIABwAHIAbwBwAGUAcgB0AHkAIABj
AGEAbgBuAG8AdAAgAGIAZQAgAHMAZQB0ACAAdABvACAARgBhAGwAcwBlAC4AIABBAHMAcwBpAGcA
bgAgAGEAIAB2AGEAbAB1AGUAIAB0AG8AIAB0AGgAZQAgAGMAbwBsAHUAbQBuACAAaQBuAHMAdABl
AGEAZAAuAAARTwB1AHQAcAB1AHQAIAAwAAAPYwBvAGwAbQBhAHMAawAAD2MAbwBuAG4AcwB0AHIA
ABFmAGkAbABlAG0AYQBzAGsAABFmAGkAcgBzAHQAdgBhAGwAABFoAGEAcwBoAGMAbwBsAHMAAA9s
AGEAcwB0AHYAYQBsAAARbQBhAHMAawBjAG8AbABzAAATcwBhAGwAdABlAGQAawBlAHkAAHFTAEMA
XwBkADAAYwBkAGEAZQBhADkAMQA5AGIAMQA0ADMANgBjAGIAYwAwADMAMQA4AGMAYwBkADAAZgBj
ADUAZQAyADgALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAwI9R
U5BqgkauuqIsMjQPlgAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERbQ8HCR0OHQ4OCAgdDggdDggF
AAEdDg4GFRI5AggOBhUSOQIODgYgAR0OHQMHIAIBEwATAQQAAQIOBgADDg4ODgUAAg4ODgcABA4O
Dg4OBSABDh0DGgcLDg4ODh0OHQ4IFRE9AggOEiQIFRFBAggOCiAAFRE9AhMAEwEGFRE9AggOCiAA
FRFBAhMAEwEGFRFBAggOBCAAEwEFIAECEwAGIAETARMABQACAg4OBCAAEwAMFRKAhQIVEUECCA4C
BSACARwYFBABAh4AFRKAjQEeABUSgIUCHgACCAoBFRFBAggOBCAAHQMDIAACBAcBHQUFAAEdBQ4F
AAARgJkKIAQBDh0FCBGAmQUgAR0FCAUAAQ4dBQMHAQ4CBg4FIAIBAwgFBwIdDg4EIAECDgQAAQ4O
BCABAwgGAAMODhwcBwcFDggODggDIAAIBSACDggIBCABDggHAAQODhwcHAUHAhJJCAUgAggICAMg
AA4DBwECCSADARJVHQgSWQUgAgEIHAMHAQgGAAIIElkOBSABHQgIBSAAEoDJBiABEoDNHAUAABKA
0QYgARwSgNUIAAESgNkRgN0FIAASgOEHIAIBDhKA4QUgAg4ODgi3elxWGTTgiQiJhF3NgIDMkQJY
AAQBAAAABAUAAAAHBhUSOQIODgcGFRI5AggOAgYCAwYSFAMGEhgDBhIMAwYSXQMGEmUDBhJpAwYS
IAcGFRFBAggOBQACDhwDBwAEDg4ICAMFAAIOHAgEIAEBAgsgBAEIHQgdElUSWQUgAQESXQQAABJl
BAAAEmkFAAEBEmkEAAASIAMAAAEJIAECFRFBAggOAygADgMoAAIDKAAIBAgAEmUECAASaQQIABIg
CAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTQ19k
MGNkYWVhOTE5YjE0MzZjYmMwMzE4Y2NkMGZjNWUyOAAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAy
MDIxAABNAQAcLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjcuMgEAVA4URnJhbWV3b3JrRGlzcGxh
eU5hbWUULk5FVCBGcmFtZXdvcmsgNC43LjK0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJj
ZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1
dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1
bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAA1EQAAAAAAAAAAAAA7kQAAAAg
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOBEAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5k
bGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAA
GAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAADs
AwAAAAAAAAAAAADsAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAA
AQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQBy
AEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAE
TAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAKAMAAAEAMAAwADAAMAAwADQAYgAw
AAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0A
ZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAEMAXwBk
ADAAYwBkAGEAZQBhADkAMQA5AGIAMQA0ADMANgBjAGIAYwAwADMAMQA4AGMAYwBkADAAZgBjADUA
ZQAyADgAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AMAAuADAAAABw
ACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfAGQAMABjAGQAYQBlAGEAOQAxADkA
YgAxADQAMwA2AGMAYgBjADAAMwAxADgAYwBjAGQAMABmAGMANQBlADIAOAAuAGQAbABsAAAASAAS
AAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAA
IAAyADAAMgAxAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4
ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBDAF8AZAAwAGMAZABhAGUA
YQA5ADEAOQBiADEANAAzADYAYwBiAGMAMAAzADEAOABjAGMAZAAwAGYAYwA1AGUAMgA4AC4AZABs
AGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAQwBfAGQAMABjAGQAYQBlAGEA
OQAxADkAYgAxADQAMwA2AGMAYgBjADAAMwAxADgAYwBjAGQAMABmAGMANQBlADIAOAAAADQACAAB
AFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAA4AAgAAQBBAHMA
cwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAAADUAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_d0cdaea919b1436cbc0318ccd0fc5e28</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::connstr,$Package::colmask,$Package::filemask,$Package::firstval,$Package::hashcols,$Package::lastval,$Package::maskcols,$Project::saltedkey</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">BD</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <outputs>
                    <output
                      refId="Package\getFiles\Transform\HashMask_Files.Outputs[Output 0]"
                      hasSideEffects="true"
                      name="Output 0">
                      <outputColumns>
                        <outputColumn
                          refId="Package\getFiles\Transform\HashMask_Files.Outputs[Output 0].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\getFiles\Transform\HashMask_Files.Outputs[Output 0].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\getFiles\Transform.Paths[Output 0]"
                  endId="Package\getFiles\Transform\HashedMasked_Files_Output.Inputs[Flat File Destination Input]"
                  name="Output 0"
                  startId="Package\getFiles\Transform\HashMask_Files.Outputs[Output 0]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{f3b02507-63aa-4d56-8917-839a37bb3789}"
          DTS:ObjectName="{594AFE2D-68D0-410A-9C4C-FCE6680D555B}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::currentfile" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="125.6,41.6"
          Id="Package\getFiles\Transform"
          TopLeft="27.8666572623787,28.1333350827959" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="204.8,124.8"
          Size="204.8,168"
          Id="Package\getFiles"
          TopLeft="114.166662130091,73.6666672521167" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\getFiles\Transform">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="215.2,41.6"
          Id="Package\getFiles\Transform\HashedMasked_Files_Output"
          TopLeft="264.393928201512,203.278789855543" />
        <NodeLayout
          Size="155.2,41.6"
          Id="Package\getFiles\Transform\HashMask_Files"
          TopLeft="260,69.0909090909091" />
        <EdgeLayout
          Id="Package\getFiles\Transform.Paths[Output 0]"
          TopLeft="337.6,110.690909090909">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="34.3939282015117,92.5878807646334"
              Start="0,0"
              End="34.3939282015117,85.0878807646334">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,42.2939403823167" />
                  <mssgle:CubicBezierSegment
                    Point1="0,42.2939403823167"
                    Point2="0,46.2939403823167"
                    Point3="4,46.2939403823167" />
                  <mssgle:LineSegment
                    End="30.3939282015117,46.2939403823167" />
                  <mssgle:CubicBezierSegment
                    Point1="30.3939282015117,46.2939403823167"
                    Point2="34.3939282015117,46.2939403823167"
                    Point3="34.3939282015117,50.2939403823167" />
                  <mssgle:LineSegment
                    End="34.3939282015117,85.0878807646334" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>